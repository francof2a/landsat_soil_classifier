#!/usr/bin/env python
from __future__ import absolute_import
from __future__ import print_function

__version__ = '0.2.0'

import argparse
import os
import sys
import yaml
import hls4ml

def parse_config(config_file):
    print('Loading configuration from', config_file)
    config = open(config_file, 'r')
    return yaml.load(config, Loader=yaml.SafeLoader)

def main():
    parser = argparse.ArgumentParser(description='HLS4ML - Machine learning inference in FPGAs')
    subparsers = parser.add_subparsers()
    
    config_parser = subparsers.add_parser('config', help='Create a conversion configuration file')
    convert_parser = subparsers.add_parser('convert', help='Convert Keras or ONNX model to HLS')
    build_parser = subparsers.add_parser('build', help='Build generated HLS project')

    config_parser.add_argument('-m', '--model', help='Model file to convert (Keras .h5 or .json, or ONNX .onnx file)', default=None)
    config_parser.add_argument('-w', '--weights', help='Optional weights file (if Keras .json file is provided))', default=None)
    config_parser.add_argument('-o', '--output', help='Output file name', default=None)
    config_parser.set_defaults(func=config)
    
    convert_parser.add_argument('-c', '--config', help='Configuration file', default=None)
    convert_parser.set_defaults(func=convert)
    
    build_parser.add_argument('-p', '--project', help='Project directory', default=None)
    build_parser.add_argument('-c', '--simulation', help='Run C simulation', action='store_true', default=False)
    build_parser.add_argument('-s', '--synthesis', help='Run C/RTL synthesis', action='store_true', default=False)
    build_parser.add_argument('-r', '--co-simulation', help='Run C/RTL co-simulation (implies -c and -s)', action='store_true', default=False)
    build_parser.add_argument('-e', '--export', help='Export IP (implies -s)', action='store_true', default=False)
    build_parser.add_argument('-a', '--all', help='Run C simulation, C/RTL synthesis and co-simulation', action='store_true')
    build_parser.set_defaults(func=build)
    
    parser.add_argument('--version', action='version', version='%(prog)s {version}'.format(version=__version__))

    args = parser.parse_args()
    if hasattr(args, 'func'):
        args.func(args)
    else:
        parser.print_usage()

def config(args):
    raise NotImplementedError

def convert(args):
    yamlConfig = parse_config(args.config)
    model = None
    if 'OnnxModel' in yamlConfig:
        model = hls4ml.converters.onnx_to_hls(yamlConfig)
    elif 'PytorchModel' in yamlConfig:
        model = hls4ml.converters.pytorch_to_hls(yamlConfig)
    else:
        model = hls4ml.converters.keras_to_hls(yamlConfig)
    
    if model is not None:
        hls4ml.writer.vivado_writer.write_hls(model)

def build(args):
    if args.project is None:
        print('Project directory (-p or --project) must be provided.')
        sys.exit(1)
    
    csim = synth = cosim = export = 0
    if args.simulation:
        csim = 1
    if args.synthesis:
        synth = 1
    if args.co_simulation:
        synth = cosim = 1
    if args.export:
        synth = export = 1
    if args.all:
        csim = synth = cosim = export = 1
    
    # Check if vivado_hls is available
    if 'linux' in sys.platform or 'darwin' in sys.platform:
        found = os.system('command -v vivado_hls > /dev/null')
        if found is not 0:
            print('Vivado HLS installation not found. Make sure "vivado_hls" is on PATH.')
            sys.exit(1)
    
    os.system('cd {dir} && vivado_hls -f build_prj.tcl "csim={csim} synth={synth} cosim={cosim} export={export}"'.format(dir=args.project, csim=csim, synth=synth, cosim=cosim, export=export))

if __name__== "__main__":
    main()
